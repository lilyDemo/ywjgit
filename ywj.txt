% Seminar One 
%
% Start with a fresh workspace
clear;clc;
%
load OSIRIS_Data_2016.mat
% First choose a country
ctryChoice = {'Germany'};
DataOut=ChooseCountry(OSIRIS_Data_2016,ctryChoice);
% Next choose an industry
%
% 44 and 45 are for the retail sector.
%
codeChoice = {'44','45'};
IndDataOut=ChooseIndustryIdentifier(DataOut,codeChoice);
%
%
% If you want to look at the whole database in excel then you  
% can make a dump of the information
ExportToExcelDataBase(IndDataOut,'GERMANY_Retail');
%
% Or you can choose a subset of data.
%
% You can go back and manually type in the flds from the reference sheet,
% Or we can just pull a few bits and pieces
%
%
% We can just pull out the pre computed Ratios
% You can decide what other ones yourself.
%
codelists.Ratios = fieldnames(IndDataOut.Ratios);
codelists.Reference = {'NAME';'LASTYR';'AUDSTAT';'STOCKXCH'};
ExportToExcelDataBase(IndDataOut,'Germany_Retail_Selected_Codes.txt',codelists);
% 
 
 
% A simple analysis, let us do the following: we will pick a single firm
% out of the data and then construct an industry average for each of the
% ratios, for a couple of years.
% Lets choose 2012 -- 2014, we can choose more if we like
% Because of the way this database is structured we can use any of the
% CLOSDATE fields in the four sub databases.
%
% We can also sub divide down to when, within the year, the CLOSDATE is, but for now 
% we will just firms with year ends in one of these years we are looking at
year = cellstr(IndDataOut.IncomeStatement.CLOSDATE(:,1:4));
%make an array of the years of interest
yearSamples = {'2010';'2011';'2012';'2013';'2014'};%remember to use ";" to make a vertical table
for i=1:length(yearSamples)
    % initialize the index
    if i==1
        indexYear = find(strcmp(yearSamples{i,1},year));
    else
        indexYear = [indexYear;find(strcmp(yearSamples{i,1},year))]; %#ok<AGROW>
    end
end
%now we have an index of just the reporting years of interest.
% we should sort the index, so all the firms years appear next to each
% other.
indexYear = sort(indexYear);
%if you want to see the names of the firms in the sample then:
%type disp(IndDataOut.Reference.NAME(indexYear,:))
%
% We also have "indexByYear" which is a collection of indices by year, we
% can use these later.
%
%
% We can create a matrix of data for just the income statement items
% as follows:
%
% So we have three sections for measurements in our vertical analysis.
%
% First we need to look at the income statement
%
% Contrary to popular belief the idea of a "base data" is not fixed in
% stone, yes it makes sense to use Gross Sales, but remember you can choose
% other measurements if this is not appropriate. For instance certain tech stocks
% and some other niche sectors sales data is not representative of activity
% or value. However, we are looking at retail and sales is the the most appropriate base
% data.
%
% Income Statement --> 
flds = fieldnames(IndDataOut.IncomeStatement);
info = cellstr(IndDataOut.Reference.NAME(indexYear,:));
info = [info cellstr(IndDataOut.IncomeStatement.CLOSDATE(indexYear,:))];
info = [info cellstr(IndDataOut.IncomeStatement.OS_ID_NUMBER(indexYear,:))];
 
%initialize an income data matrix and create an index
incomeData = [];
k = 1;
for i=4:length(flds)
    incomeData(:,k) = IndDataOut.IncomeStatement.(flds{i,1})(indexYear,:);
    k = k+1;
end
% we can pull out the base unit
grossSales = IndDataOut.IncomeStatement.DATA13000(indexYear,:);
%info = IndDataOut.IncomeStatement.(flds{1,1});
% 
% We will need the reference names so we know what is going on.
% The ReferenceData.xlsx is designed to be in a user friendly format
% We will need this later.
codeInfoList = importdata('ReferenceData.xlsx');
%
% Next job select a firm -- we could just use the Ratios to guide us
% Indeed, if you were working in industry we would do this, but for now let
% us look at an individual firm as an arbitrary choice
% Marks and Spencer [M&S] is a "National Retail Obsession" for the UK
% So let us compare the vertical ratios for M&S to the sector average for
% the years in question.
%
% Let us pick out the company we want which is M&S
%
% So we now have three bits of information: 
% grossSales -- The base data
% incomeData -- The income statement data
% info       -- The information needed for us to do some more sorting.
%
% So let us compute the ratios "en-block" then pull them apart and
% re-average
%
% What is amazing is that the actual calculation of all the ratios is just
% one line of code, that is 7,872 for this example:
%
IncomeStatementRatios = incomeData./repmat(grossSales,1,size(incomeData,2));
IncomeStatementRatios(find(isinf(IncomeStatementRatios))) = NaN;
%
% Final job is simply to seperate Marks and Spencers from the rest and the
% average by year and print to a spreadsheet for us to interrogate.
 
selectedCompanyIndex = find(strcmp('Metro AG',info));
selectedCompanyRatios = IncomeStatementRatios(selectedCompanyIndex,:);
selectedCompanyInfo = info(selectedCompanyIndex,:);
selectedCompanySales = grossSales(selectedCompanyIndex,:);
% Do the same for the industry, but now you just delete the firm
industryCompanyRatios = IncomeStatementRatios;industryCompanyRatios(selectedCompanyIndex,:) = [];
industryCompanyInfo = info;industryCompanyInfo(selectedCompanyIndex,:) =[];
industryCompanySales = grossSales;industryCompanySales(selectedCompanyIndex,:)=[];
% Now we just build a table of averages by year.
 
companyData = zeros(size(selectedCompanyRatios,2),length(yearSamples));
industryAverage = zeros(size(industryCompanyRatios,2),length(yearSamples));
for i=1:length(yearSamples)
    yearInfo = yearSamples{i,1};
    indexIndustry = strncmp(yearInfo,industryCompanyInfo(:,2),4);
    indexSelected = strncmp(yearInfo,selectedCompanyInfo(:,2),4);
    companyData(:,i) = selectedCompanyRatios(indexSelected,:);
    industryAverage(:,i) = nanmedian(industryCompanyRatios(indexIndustry,:));
    headerSelected{i,1} = ['Metro AG',yearInfo];
    headerSector{i,1} = ['Sector_Median_',yearInfo];    
end
 
% Here are the definitions, but they are in a specific order
% It is useful to use this order
IncomeCodes = codeInfoList.IncomeStatement(4:end,:);
IncomeFlds = flds(4:end,:);
% We can use set theory to rearrange the raw data into something useful
[~,IB] = ismember(IncomeCodes(:,1),IncomeFlds);
companyData = companyData(IB,:);
industryAverage = industryAverage(IB,:);
 
% Let us make a table to export to excel to look at:
tabInfo = [IncomeCodes num2cell(companyData) num2cell(industryAverage)];
tabheader = [{'Data_Code';'Item'};headerSelected;headerSector];
%database tool hates spaces and punctuation, stuff goes wrong!
tabheader = strrep(tabheader,' ','_');
tabheader = strrep(tabheader,'.','');
TabOut = cell2table(tabInfo,'VariableNames',tabheader');
%TabOut is arbitrary you can use anything you like
writetable(TabOut,'GERMANY_Retail.txt','Delimiter','\t');
% We will see that this is a bit confusing, so we can easily trim
% things a bit.
%
% There is no point in comparing a ratio that is either not reported by the
% industry or by Marks and Spencer.
%
% This will create an index to sort the not reported rows out
% If you don't want to delete rows from either the Industry of the Firm
% then just delete them from this reference
%
nanIndexRow = find(sum(isnan([companyData industryAverage]),2));
 
tabInfoEdit = tabInfo;
tabInfoEdit(nanIndexRow,:) = [];
TabOut = cell2table(tabInfoEdit,'VariableNames',tabheader');
%TabOut is arbitrary you can use anything you like
writetable(TabOut,'GERMANY_Retail_Edit.txt','Delimiter','\t');
%
% You can also sort things out if you like.
% The easiest way of putting the codes in the order you like is to change
% the code reference file
%
% 
 
 
 
 
 
 
 
 
 
 
 
%to do calculations we need just the ones with DATA, the first three are
%reference information, so let us delete them using the [] command.
%flds(1:3) = [];
%if we loop through the fields we can create a matrix

